package com.sist.bookoo;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.snu.ids.ha.index.Keyword;
import org.snu.ids.ha.index.KeywordExtractor;
import org.snu.ids.ha.index.KeywordList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.support.DaoSupport;
import org.springframework.data.hadoop.mapreduce.JobRunner;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.sist.main.dao.BookListDAO;
import com.sist.main.dao.BookListVO;

import com.sist.main.news.dao.NewsDAO;
import com.sist.main.news.dao.NewsVO;
import com.sist.main.newsmgr.NewsManager;

import com.sist.mongo.BookRentVO;

import com.sist.mapred.NaverManager;
import com.sist.mapred.RDataVO;
import com.sist.mapred.RManager;
import com.sist.mongo.ReviewVO;

import com.sist.newbookdao.NewBooklistDAO;
import com.sist.newbookdao.NewBooklistVO;

import com.sist.rankdao.RankDAO;


@Controller
public class MainController {

	@Autowired
	private BookListDAO bldao;

	@Autowired
	private NewsDAO newsdao;
	@Autowired
	private NewsManager newsmgr;	

	@Autowired
	private RankDAO rankdao;

	@Autowired
	private NewBooklistDAO newdao;
	
	// 긍정과 부정 % , 워드클라우드 private list
    @Autowired
    private RManager rm;
    @Autowired
    private NaverManager naver;
    @Autowired
    private Configuration conf;
    @Autowired
    private JobRunner jr; //맵리듀스 실행

	@RequestMapping("main/main.do")
	public String main_main(String page, String data,Model model){
		
		List<BookListVO> list = bldao.mainlist();
		List<BookListVO> list2 = bldao.mainlist2();
		List<BookListVO> list3 = bldao.mainlist3();
			
		if(data==null)
			data="[신간]";
		if(page==null)
			page="1";
		
		int curpage = Integer.parseInt(page);
		System.out.println(curpage);
		
		//newsdao.newsDrop();
		//newsmgr.newsData(data);
		List<NewsVO> newslist = newsdao.newsAllData(curpage);
		
		model.addAttribute("list", list);
		model.addAttribute("list2",list2);
		model.addAttribute("list3", list3);
		
		model.addAttribute("curpage",curpage);
		model.addAttribute("totalpage",5);
		model.addAttribute("data",data);
		model.addAttribute("newslist",newslist);
		return "main/main";
	}
	@RequestMapping("main/genredetail.do")
	public String main_genre(){
		
		
		return "main/genredetail";
	}
	@RequestMapping("main/recomend.do")
	public String main_recomend(Model model){
		
		
		return "main/recomend";
	}
	@RequestMapping("main/newbook.do")
	public String main_newbook(String page,Model model){
		
		if(page==null)
			page="1";
		int curpage=Integer.parseInt(page);
		List<NewBooklistVO> list=newdao.newbookAllData(curpage);
		int totalpage=newdao.NewsTotalPage();
		
		
		String json="[";
		   for(NewBooklistVO vo:list)
		   {
			   json+="{country: \""+vo.getTitle()+"\",value:"+vo.getStar()+"},";
		   }
		   json=json.substring(0,json.lastIndexOf(","));
		   json+="]";
		   
	    model.addAttribute("json", json);
		
		
		
		model.addAttribute("list",list);
		model.addAttribute("totalpate",totalpage);
		
		return "main/newbook";
	}
	@RequestMapping("main/best.do")//랭크 테이블 만드는 요청
	public void main_best(){		
		rankdao.makeBookRanktable();

	}
	@RequestMapping("main/best1.do")
	public String main_bestpage(Model model){
		List<BookListVO> list=rankdao.bestBooks();
		//System.out.println("이것봐.."+list.size());
		model.addAttribute("list", list);

		return "main/best";
	}
	
	@RequestMapping("main/detail.do")
	public String main_detain(double isbn,Model model){
		
		BookListVO vo = newdao.bookDetailData(isbn);

    	// daum / naver => 댓글 => AOP
    	naver.naverBlogData(vo.getTitle());   //데이터수집
    	naver.naverReplyData();					//데이터수집
    	hadoopFileDelete();							//분석--┓
    	copyFromLocal();
    	try{
    		jr.call();
    	}catch(Exception ex){}
    	// Run
    	copyToLocal();								//분석--┛
    	// R연동
    	rm.wordCloud();
    	
    	List<RDataVO> rList=rm.feelGraph();
 	   
		//ReviewVO rvo = newdao.reviewGraphData(isbn);
		
		//model.addAttribute("rList", rvo);
		
		vo.setCount(vo.getBookin().length());
		
		vo.setCount1(vo.getPwriter().length());
		
		model.addAttribute("rList", rList);
		model.addAttribute("vo",vo);
		
		return "main/detail";
	}
	@RequestMapping("main/writer.do")
	public String main_writer(){
		return "main/writer";
	}
	@RequestMapping("main/search.do")
	public String main_search(){
		return "main/search";
	}

	
	
	
	
	public List<ReviewVO> reviewGetData(double isbn13,Model model){
		  
		  List<ReviewVO> list = new ArrayList<ReviewVO>();
		
		  try{
		

				
				ReviewVO rList = newdao.reviewGraphData(isbn13);
				
				String data = rList.getContent();
				
				int i = 0;

				System.out.println(data);
				// 꼬꼬마
				// 명사형으로 자르려고 한다 알말고 여기서
				// 명사만 자르는 클래스 이름
				KeywordExtractor ke = new KeywordExtractor();
				KeywordList kl = ke.extractKeyword(data, true); // 읽은 댓글 전체를 이곳에 넘겨준다.

				for (i = 0; i < kl.size(); i++) {
					Keyword k = kl.get(i);

					
						if (k.getCnt() > 10 && k.getString().length() > 1) {

							ReviewVO vo = new ReviewVO();
							vo.setKeyword(k.getString());
							vo.setCount(k.getCnt());
							list.add(vo);
							
							System.out.println(k.getString() + ":" + k.getCnt());

						}

					

				}
				
			  
		  }catch(Exception e){
			   System.out.println(e.getMessage());
		   }
	   
		  
		  return list;
		  
	  }
	// 긍정과 부정 % , 워드클라우드 맵리듀스 작업 할 리스트
		public void hadoopFileDelete()
	    {
	    	try
	    	{
	    		//Hadoop연결
	    		FileSystem fs=FileSystem.get(conf);
	    		if(fs.exists(new Path("/input5/bookreply.txt")))
	    		{
	    			fs.delete(new Path("/input5/bookreply.txt"),true);
	    		}
	    		if(fs.exists(new Path("/output05")))
	    		{
	    			fs.delete(new Path("/output05"),true);
	    		}
	    	}catch(Exception ex)
	    	{
	    		System.out.println(ex.getMessage());
	    	}
	    }
	    public void copyFromLocal()
	    {
	    	try
	    	{
	    		FileSystem fs=FileSystem.get(conf);
	    				fs.copyFromLocalFile(new Path("/home/sist/pj_bookreply/bookreply.txt"),new Path("/input5/bookreply.txt"));
	    	}catch(Exception ex)
	    	{
	    		System.out.println(ex.getMessage());
	    	}
	    }
	    public void copyToLocal()
	    {
	    	try
	    	{
	    		FileSystem fs=FileSystem.get(conf);
	    		fs.copyToLocalFile(new Path("/output05/part-r-00000"),new Path("/home/sist/pj_bookreply/bresult"));
	    	}catch(Exception ex)
	    	{
	    		System.out.println(ex.getMessage());
	    	}
	    }
}
